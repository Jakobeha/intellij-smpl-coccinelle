/// SPEC: https://coccinelle.gitlabpages.inria.fr/website/docs/main_grammar.html
{
    parserClass="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLParser"
    parserUtilClass="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLParserUtilBase"

    implements="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLCompositeElement"
    extends="com.github.jakobeha.intellijsmplcoccinelle.psi.impl.SmPLCompositeElementImpl"

    psiClassPrefix="SmPL"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.jakobeha.intellijsmplcoccinelle.psi"
    psiImplPackage="com.github.jakobeha.intellijsmplcoccinelle.psi.impl"

    elementTypeHolderClass="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLTypes"
    elementTypeClass="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLElementType"
    tokenTypeClass="com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLTokenType"

    generate=[tokenAccessors="yes"]

    tokens = [
        DIGITS = 'regexp:[0-9]+'
        WORD = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        VARIABLE = 'regexp:(?<!^)(@)[\\w]+'
        WHITE_SPACE = 'regexp:\s+'
        STRING = 'regexp:"[^"]*"'
        // REGEXP = 'regexp:"[^"]*"'
        SYS_PATH = 'regexp:<[^>]*>'
        SCRIPT_LINE = 'regexp:^=[^\r\n]*'
        INSERT_LINE = 'regexp:^\+[^\r\n]*'
        DELETE_LINE = 'regexp:^-[^\r\n]*'
        STAR_LINE = 'regexp:^\*[^\r\n]*'
    ]
}

program ::= include_cocci* changeset+

include_cocci ::=
    '#include' STRING |
    'using' STRING |
    'using' SYS_PATH |
    'virtual' <<commaSeparate WORD>>

changeset ::=
    metavariables transformation |
    script_metavariables script_code

metavariables ::=
    '@@' metadecl* '@@' |
    '@' rulename '@' metadecl * '@@'
rulename ::=
    id  ['extends' id] ruleattr*
ruleattr ::=
    'depends' 'on' [exists] dep |
    'using' <<commaSeparate STRING>> |
    'disable' <<commaSeparate id>> |
    exists |
    rulekind
dep ::=
    dep_ '&&' dep |
    dep_ '||' dep |
    dep_
dep_ ::=
    id |
    '!' id |
    '!(' dep ')' |
    'ever' id |
    'never' id |
    'file' 'in' string |
    '(' dep ')'
private exists ::=
    'exists' |
    'forall'
private rulekind ::=
    'expression' |
    'identifier' |
    'type'

 metadecl ::=
    'attribute' ids ';' |
     ('attribute' | 'declarer' | 'iterator') 'name' ids ';' |
     ('symbol' | 'typedef') pmids ';' |
     'fresh' 'identifier' pmids_with_seed ';' |
     ('metavariable' | 'type' | 'declaration' | 'position' 'any'? | 'declarer' | 'iterator') pmids_with_constraints ';' |
     ('identifier' | 'field' | 'parameter' | 'statement' | 'initializer' | 'format') [list] pmids_with_constraints ';' |
      ['local' | 'global'] 'idexpression'  [ctype_or_types | '*'+] pmids_with_constraints ';' |
     'expression'  [list | ('enum' | 'struct' | 'union') '*'*] pmids_with_constraints ';' |
     ctype_or_types  ['[' ']'] pmids_with_constraints ';' |
     'constant' [ctype_or_types] pmids_with_constraints ';' |
     'assignment' 'operator' <<commaSeparate assignopdecl>> ';' |
     'binary' 'operator' <<commaSeparate binopdecl>> ';' |
     'unary' 'operator' <<commaSeparate unopdecl>> ';' |
private ctype_or_types ::=
    CTYPE |
    '{' <<commaSeparate CTYPE>> '}' '*'*
list ::= 'list'  ['[' (id | DIGITS) ']']
assignopdecl ::= pmid  ['=' assignop_constraint]
assignop_constraint ::= '{' <<commaSeparate assign_op>> '}' | assign_op
binopdecl ::= pmid  ['=' binop_constraint]
binop_constraint ::= '{' <<commaSeparate bin_op>> '}' | bin_op
unopdecl ::= pmid  ['=' unop_constraint]
unop_constraint ::= '{' <<commaSeparate unary_op>> '}' | unary_op

assign_op ::= '=' | '-=' | '+=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '^=' | '|='
bin_op ::= '+' | '-' | '*' | '/' | '%' | '<<' | '>>' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '&' | '^' | '|' | '&&' | '||'
unary_op ::= '+' | '-' | '!' | '~' | '++' | '--' | '&' | '*'

ids ::= <<commaSeparate id>>
pmids ::= <<commaSeparate pmid>>
pmids_with_constraints ::= <<commaSeparate (pmid [constraints])>>
pmids_with_seed ::= <<commaSeparate (pmid [seed])>>
pmid ::= id  ['.' id]
constraints ::= constraint ('&&' constraint)*
constraint ::=
    compare_constraint |
    regexp_constraint |
    ':' script
compare_constraint  ::= id_compare_constraint | int_compare_constraint
id_compare_constraint ::=
    ('=' | '!=') (pmid | '{' <<commaSeparate pmid>> '}')
int_compare_constraint  ::=
    ('=' | '!=') (INTEGER | '{' <<commaSeparate INTEGER>> '}')
regexp_constraint ::= ('=~' | '!~') STRING
seed ::=
    '=' string |
    '=' string '|' pmid ('##' string '|' pmid)* |
    '=' script
script ::=
    'script' ':' language '(' <<commaSeparate (id '.' id)>> ')' '{' expr '}'

script_metavariables ::=
    '@' ('script' | 'initialize' | 'finalize') ':' language [rulename] ['depends' 'on' dep] '@' script_metadecl* '@@'
private language ::= 'python' | 'ocaml'
script_metadecl ::=
    (id | '(' id ',' id ')') ['<<' id '.' id ['=' (STRING | '[' ']')]] ';'
id ::=
    WORD |
    '(' id ')' |
    '(' id ('|' id)+ ')' |
    '(' id ('&' id)+ ')'

script_code ::=
    SCRIPT_LINE+

transformation ::=
    transformation_line+

transformation_line ::=
    SCRIPT_LINE |
    INSERT_LINE |
    DELETE_LINE |
    STAR_LINE

private meta commaSeparate ::= <<p>> (',' <<p>>)* {pin(".*")=1}