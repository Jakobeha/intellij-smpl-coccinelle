/// SPEC: https://coccinelle.gitlabpages.inria.fr/website/docs/main_grammar.html
{
    tokens = [
        DIGITS = 'regexp:[0-9]+',
        WORD = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        VARIABLE = 'regexp:(?<!^)(@)[\\w]+'
        WHITE_SPACE = 'regexp:\s+'
        STRING = 'regexp:"[^"]*"'
        // REGEXP = 'regexp:"[^"]*"'
        SYS_PATH = 'regexp:<[^>]*>'
    ]
}

program ::= include_cocci* changeset+

include_cocci ::=
    '#include' STRING |
    'using' STRING |
    'using' SYS_PATH |
    'virtual' COMMA_LIST(WORD)

changeset ::=
    metavariables transformation |
    script_metavariables script_code

metavariables ::=
    '@@' metadecl* '@@' |
    '@' rulename '@' metadecl * '@@' |
rulename ::=
    id ('extends' id)? ('depends on' (exists)? dep)? (iso)? (disable-iso)? (exists)? (rulekind)?
dep ::=
    id |
    '!' id |
    '!(' dep ')' |
    'ever' id |
    'never' id |
    dep '&&' dep |
    dep '||' dep |
    'file in' string |
    '(' dep ')'
iso ::= 'using' COMMA_LIST(STRING)
disable-iso  ::= disable COMMA_LIST(id)
exists ::=
    'exists' |
    'forall'
rulekind ::=
    'expression' |
    'identifier' |
    'type'

 metadecl ::=
     'fresh' 'identifier' pmids_with_seed ';' |
     'metavariable' pmids_with_constraints ';' |
     'identifier' pmvids_with_constraints ';' |
     'identifier' list pmvids_with_constraints ';' |
     'field' (list)? pmids_with_constraints ';' |
     'parameter' (list)? pmids_with_constraints ';' |
     'type' pmids_with_constraints ';' |
     'statement' (list)? pmids_with_constraints ';' |
     'declaration' pmids_with_constraints ';' |
     'initialiser' (list)? pmids_with_constraints ';' |
     'initializer' (list)? pmids_with_constraints ';' |
     idexpression '*'* pmids_with_constraints ';' |
     idexpression ctype pmids_with_constraints ';' |
     idexpression '{' ctypes '}' '*'* pmids_with_constraints ';' |
     'expression' list pmids_with_constraints ';' |
     expression_enum_struct_union '*'* pmids_with_constraints ';' |
     ctype ('[' ']')? pmids_with_constraints ';' |
     '{' ctypes '}' '*'* ('[' ']')? pmids_with_constraints ';' |
     'constant' pmids_with_constraints ';' |
     'constant' ctype pmids_with_constraints ';' |
     'constant' '{' ctypes '}' '*'* pmids_with_constraints ';' |
     'format' (list)? pmids_with_constraints';' |
     'assignment' 'operator' COMMA_LIST(assignopdecl) ';' |
     'binary' 'operator' COMMA_LIST(binopdecl) ';' |
     'unary' 'operator' COMMA_LIST(unopdecl) ';' |
     'position' ('any')? pmids_with_constraints ';' |
     'symbol' pmids ';' |
     'typedef' pmids ';' |
     'attribute' name ids ';' |
     'attribute' ids ';' |
     'declarer' 'name' ids ';' |
     'declarer' pmids_with_constraints ';' |
     'iterator' 'name' ids ';' |
     'iterator' pmids_with_constraints ';'
idexpression ::=
    'local' 'idexpression' |
    'global' 'idexpression' |
    'idexpression'
expression_enum_struct_union ::=
    'expression' 'enum' |
    'expression' 'struct' |
    'expression' 'union'
list ::=
    'list' |
    'list' '[' id ']' |
    'list' '[' integer ']'
assignopdecl ::= pmid ('=' assignop_constraint)?
assignop_constraint ::= '{' COMMA_LIST(assign_op) '}' | assign_op
binopdecl ::= pmid ('=' binop_constraint)?
binop_constraint ::= '{' COMMA_LIST(bin_op) '}' | bin_op
unopdecl ::= pmid ('=' unop_constraint)?
unop_constraint ::= '{' COMMA_LIST(unary_op) '}' | unary_op

ids ::= COMMA_LIST(id)
pmids ::= COMMA_LIST(pmid)
pmids_with_constraints ::= COMMA_LIST(pmid (constraints)?)
pmvids_with_constraints ::= COMMA_LIST(pmvid (constraints)?)
pmids_with_seed ::= COMMA_LIST(pmid (seed)?)
pmvid ::= pmid | 'virtual' '.' id
pmid  ::= id | mid
mid ::= rulename_id '.' id
constraints ::= ANDAND_LIST(constraint)
constraint ::=
    compare_constraint |
    regexp_constraint |
    ':' script
compare_constraint  ::= id_compare_constraint | int_compare_constraint
id_compare_constraint ::=
    '=' pmid |
    '=' '{' COMMA_LIST(pmid) '}' |
    '!=' pmid |
    '!=' '{' COMMA_LIST(pmid) '}'
int_compare_constraint  ::=
    '=' integer |
    '=' '{' COMMA_LIST(integer) '}' |
    '!=' integer |
    '!=' '{' COMMA_LIST(integer) '}'
regexp_constraint ::= '=~' STRING | '!~' STRING
seed ::=
    '=' string |
    '=' CONCAT_LIST(string '|' pmid) |
    '=' script
script ::=
    'script:ocaml' '(' COMMA_LIST(mid) ')' '{' expr '}' |
    'script:python' '(' COMMA_LIST(mid) ')' '{' expr '}'

const ::= STRING | DIGITS | '...'
id ::= ID | METAID_ID | OR(id) | AND(id)
typedef_ident ::= id | METAID_TYPE
type ::= ctype | METAID_TYPE

COMMA_LIST(X) ::= X | X ',' COMMA_LIST(X)
ANDAND_LIST(X) ::= X | X '&&' ANDAND_LIST(X)
CONCAT_LIST(X) ::= X | X '##' CONCAT_LIST(X)
OR(gram_o) ::= '(' gram_o ('|' gram_o)* ')'
AND(gram_o) ::= '(' gram_o ('&' gram_o)* ')'
DOTSEQ(gram_d, when_d) ::= '...' (when_d)? (gram_d '...' (when_d)?)*
NEST(gram_n, when_n) ::=
    '<' '...' (when_n)? gram_n ('...' (when_n)? gram_n) * '...' '>' |
    '<+' '...' (when_n)? gram_n ('...' (when_n)? gram_n) * '...' '+>'