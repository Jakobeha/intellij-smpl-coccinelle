/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* MODIFIED from generated SmPL.bnf lexer. Do not replace */
package com.github.jakobeha.intellijsmplcoccinelle.parsing;

import com.github.jakobeha.intellijsmplcoccinelle.injection.SmPLCodeLang;import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLTypes.*;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/main/java/com/github/jakobeha/intellijsmplcoccinelle/parsing/_SmPLLexer.flex</tt>
 */
public class _SmPLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int METAVARS = 2;
  public static final int SCRIPT_METAVARS = 4;
  public static final int CODE_BLOCK = 6;
  public static final int AFTER_CODE_BLOCK = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  6,  7, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\4\30\22\0\1\37\1\45\1\7\1\12\2\0\1\50\1\0\1\54\1\55\1\4\1\0\1\52"+
    "\1\0\1\62\1\2\12\5\1\33\1\53\1\10\1\46\1\11\1\0\1\31\21\6\1\3\10\6\1\56\1"+
    "\0\1\57\1\0\1\6\1\0\1\27\1\43\1\15\1\20\1\21\1\35\1\23\1\36\1\13\2\6\1\16"+
    "\1\40\1\14\1\41\1\32\1\6\1\25\1\22\1\26\1\17\1\24\1\6\1\42\1\44\1\34\1\60"+
    "\1\51\1\61\1\47\6\0\1\30\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\30\5\0\1\1\57"+
    "\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\1\1\3\1\4\3\1\2\3"+
    "\1\5\1\6\2\1\14\3\1\7\1\3\1\10\4\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\7\10\3\2\26"+
    "\1\27\2\0\1\30\1\0\1\31\1\0\2\3\2\0"+
    "\1\32\1\0\1\33\1\34\35\3\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\5\3\2\0\1\43\1\27\1\44"+
    "\3\0\2\3\3\0\45\3\2\0\1\45\2\0\2\3"+
    "\3\0\14\3\1\46\10\3\1\47\17\3\1\47\1\45"+
    "\1\44\1\0\1\50\1\3\3\0\4\3\1\51\3\3"+
    "\1\52\21\3\1\0\1\53\4\3\1\54\3\3\1\0"+
    "\1\3\3\0\5\3\2\0\3\3\1\55\4\3\1\56"+
    "\7\3\1\57\3\0\1\60\1\61\4\3\1\0\1\62"+
    "\3\0\5\3\2\0\1\63\3\3\1\64\1\3\1\65"+
    "\1\3\1\0\1\66\1\67\4\3\1\70\3\0\1\3"+
    "\1\0\2\3\1\71\1\0\1\72\1\0\3\3\1\73"+
    "\1\74\2\0\1\75\1\3\1\0\2\3\1\0\3\3"+
    "\1\76\3\0\1\3\1\0\2\3\2\0\3\3\4\0"+
    "\1\3\1\0\1\3\1\77\1\0\1\3\1\100\1\101"+
    "\4\0\1\3\1\0\2\3\1\0\1\102\1\3\1\103"+
    "\1\3\4\0\1\3\1\104\1\105\2\0\1\3\3\0"+
    "\1\106\2\0\1\3\1\0\1\103\1\105\1\0\1\107"+
    "\1\0\1\3\4\0\1\110\10\0\1\111\1\3\1\0"+
    "\1\112\2\0\1\113\15\0\1\114\1\0\1\115\3\0"+
    "\1\116\2\0\1\117\16\0\1\120\4\0\1\121\2\0"+
    "\1\122\1\123\3\0\1\124\1\0\1\125\1\0\1\126"+
    "\4\0\1\127\1\130\1\0\1\131\3\0\1\132\1\0"+
    "\1\133\2\0\1\134\2\0\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u01cb\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u01cb\0\u06c6\0\u01cb\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u02ca\0\u01cb\0\u02fd\0\u01cb"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u01cb\0\u0c27\0\u01cb"+
    "\0\u01cb\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u0a5c\0\u0a8f\0\u01cb\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4"+
    "\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u0264\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u0264\0\u01cb\0\u01cb\0\u25a7\0\u0264\0\u25da"+
    "\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u0264"+
    "\0\u2772\0\u27a5\0\u27d8\0\u0264\0\u280b\0\u283e\0\u2871\0\u28a4"+
    "\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u0264\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39"+
    "\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1"+
    "\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u0264\0\u3036"+
    "\0\u3069\0\u309c\0\u30cf\0\u0264\0\u3102\0\u3135\0\u3168\0\u319b"+
    "\0\u31ce\0\u3201\0\u3234\0\u0264\0\u3267\0\u329a\0\u32cd\0\u0264"+
    "\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u0264\0\u3432"+
    "\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564\0\u3597\0\u35ca"+
    "\0\u35fd\0\u0264\0\u3630\0\u3663\0\u3696\0\u0264\0\u36c9\0\u01cb"+
    "\0\u36fc\0\u372f\0\u0264\0\u0264\0\u3762\0\u3795\0\u37c8\0\u37fb"+
    "\0\u01cb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960"+
    "\0\u01cb\0\u3993\0\u01cb\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92"+
    "\0\u0264\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7"+
    "\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f"+
    "\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27"+
    "\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf"+
    "\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257"+
    "\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389\0\u01cb\0\u43bc"+
    "\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u01cb"+
    "\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u01cb"+
    "\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u0264\0\u0264\0\u4785\0\u47b8"+
    "\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u0264\0\u491d"+
    "\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u01cb"+
    "\0\u4ab5\0\u4ae8\0\u01cb\0\u4b1b\0\u4b4e\0\u0264\0\u4b81\0\u4bb4"+
    "\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c"+
    "\0\u4d7f\0\u4db2\0\u4de5\0\u01cb\0\u4e18\0\u0264\0\u4e4b\0\u4e7e"+
    "\0\u4eb1\0\u01cb\0\u4ee4\0\u4f17\0\u01cb\0\u4f4a\0\u4f7d\0\u4fb0"+
    "\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148"+
    "\0\u517b\0\u51ae\0\u51e1\0\u01cb\0\u5214\0\u5247\0\u527a\0\u52ad"+
    "\0\u01cb\0\u52e0\0\u5313\0\u01cb\0\u01cb\0\u5346\0\u5379\0\u53ac"+
    "\0\u01cb\0\u53df\0\u01cb\0\u5412\0\u01cb\0\u5445\0\u5478\0\u54ab"+
    "\0\u54de\0\u01cb\0\u01cb\0\u5511\0\u01cb\0\u5544\0\u5577\0\u55aa"+
    "\0\u01cb\0\u55dd\0\u01cb\0\u5610\0\u5643\0\u01cb\0\u5676\0\u56a9"+
    "\0\u01cb\0\u01cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\12\1\16\1\15\1\17"+
    "\1\20\1\12\1\21\4\15\1\22\4\15\1\23\3\15"+
    "\1\13\1\12\1\15\1\12\3\15\1\13\5\15\17\12"+
    "\1\13\1\14\1\15\1\12\1\16\1\15\1\17\1\20"+
    "\1\12\1\21\4\15\1\22\4\15\1\23\3\15\1\13"+
    "\1\24\1\15\1\12\3\15\1\13\5\15\17\12\1\13"+
    "\1\14\1\15\1\25\1\16\1\15\1\17\1\26\1\12"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\15\1\42\1\43\1\13\1\44"+
    "\1\45\1\46\1\15\1\47\1\15\1\13\1\50\1\51"+
    "\1\15\1\52\1\15\1\53\1\54\1\12\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\12\1\13\1\14\1\15\1\25\1\16\1\15"+
    "\1\17\1\26\1\12\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\15\1\42"+
    "\1\43\1\13\1\70\1\45\1\46\1\15\1\47\1\15"+
    "\1\13\1\50\1\51\1\15\1\52\1\15\1\53\1\54"+
    "\1\12\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\12\1\13\1\14\1\15"+
    "\1\25\1\16\1\15\1\17\1\26\1\12\1\27\1\71"+
    "\1\31\2\15\1\72\1\73\1\74\1\75\3\15\1\76"+
    "\1\15\1\13\1\44\1\77\1\46\1\15\1\100\1\15"+
    "\1\13\1\15\1\51\3\15\1\53\1\54\1\12\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\12\1\13\1\14\1\15\1\25\1\16"+
    "\1\15\1\17\1\26\1\12\1\27\1\71\1\31\2\15"+
    "\1\72\1\73\1\74\1\75\3\15\1\76\1\15\1\13"+
    "\1\70\1\77\1\46\1\15\1\100\1\15\1\13\1\15"+
    "\1\51\3\15\1\53\1\54\1\12\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\30\101\1\102\32\101\114\12\1\24\31\12\64\0\1\13"+
    "\26\0\1\13\6\0\1\13\25\0\1\103\1\0\1\104"+
    "\61\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\23\0\1\16\55\0\7\105"+
    "\1\106\53\105\11\107\1\110\51\107\13\0\1\111\52\0"+
    "\1\15\1\0\2\15\4\0\7\15\1\112\5\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\1\113\14\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\31\0\1\114\6\0\1\115\6\0\1\116"+
    "\3\0\1\117\35\0\1\120\64\0\1\121\53\0\1\15"+
    "\1\0\2\15\4\0\1\15\1\122\3\15\1\123\5\15"+
    "\1\124\1\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\6\15\1\125\6\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\1\15\1\126\3\15\21\0\1\15\1\0\2\15"+
    "\4\0\15\15\2\0\1\15\1\0\3\15\1\0\1\15"+
    "\1\127\3\15\21\0\1\15\1\0\2\15\4\0\1\15"+
    "\1\130\5\15\1\131\5\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\1\132"+
    "\5\15\1\133\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\11\15\1\134"+
    "\3\15\2\0\1\15\1\0\3\15\1\0\2\15\1\135"+
    "\2\15\21\0\1\15\1\0\2\15\4\0\2\15\1\136"+
    "\10\15\1\137\1\15\2\0\1\15\1\0\3\15\1\0"+
    "\4\15\1\140\21\0\1\15\1\0\2\15\4\0\3\15"+
    "\1\141\11\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\1\142\14\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\0\3\15\1\0"+
    "\4\15\1\143\21\0\1\15\1\0\2\15\4\0\7\15"+
    "\1\144\3\15\1\145\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\14\15"+
    "\1\146\2\0\1\15\1\0\3\15\1\0\1\15\1\147"+
    "\2\15\1\150\21\0\1\15\1\0\2\15\4\0\1\151"+
    "\11\15\1\152\2\15\2\0\1\15\1\0\3\15\1\0"+
    "\1\15\1\153\3\15\21\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\154\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\2\15\1\155"+
    "\12\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\156\14\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\64\0\1\157\1\160\62\0"+
    "\1\161\63\0\1\162\63\0\1\163\42\0\1\164\34\0"+
    "\1\15\1\0\2\15\4\0\5\15\1\165\7\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\7\15\1\131\5\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\132\5\15\1\166\6\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\11\15"+
    "\1\134\3\15\2\0\1\15\1\0\3\15\1\0\2\15"+
    "\1\167\2\15\21\0\1\15\1\0\2\15\4\0\2\15"+
    "\1\136\12\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\0\4\15\1\170\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\0\3\15\1\0"+
    "\4\15\1\150\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\0\1\15\1\171\3\15"+
    "\16\0\30\172\1\173\62\172\1\173\1\174\31\172\2\175"+
    "\1\176\60\175\4\177\1\200\56\177\14\0\1\201\51\0"+
    "\1\15\1\0\2\15\4\0\1\202\14\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\12\15\1\203\2\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\32\0\1\204\63\0\1\205\60\0\1\206"+
    "\52\0\1\15\1\0\2\15\4\0\1\207\14\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\6\15\1\210\6\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\211\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\11\15\1\212"+
    "\3\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\15\1\213\13\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\2\15\1\214\12\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\14\15\1\215\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\1\216\14\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\7\15\1\217\5\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\2\15\1\220\12\15\2\0\1\221\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\6\15\1\222"+
    "\6\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\223\12\15\1\224\1\15"+
    "\2\0\1\225\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\226\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\14\15\1\227\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\15\15\2\0"+
    "\1\15\1\0\3\15\1\0\1\230\4\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\1\15\1\231\3\15\21\0\1\15\1\0\2\15"+
    "\4\0\12\15\1\232\2\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\233\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\7\15\1\234\5\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\235\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\12\15"+
    "\1\236\2\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\7\15\1\237\5\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\13\15\1\240\1\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\3\15\1\241\2\15\1\242\6\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\6\15\1\243\6\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\12\15"+
    "\1\244\2\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\13\15\1\245\1\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\246\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\247\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\17\0\1\164\26\0\1\164\6\0\1\164\26\0"+
    "\1\15\1\0\2\15\4\0\6\15\1\250\6\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\221\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\1\223\12\15"+
    "\1\224\1\15\2\0\1\251\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\252"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\12\15\1\253\2\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\16\0\3\175\1\0\57\175\3\176\1\0"+
    "\57\176\4\177\1\254\56\177\2\255\1\256\1\255\1\257"+
    "\56\255\15\0\1\260\50\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\261\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\13\15\1\262"+
    "\1\15\2\0\1\15\1\0\3\15\1\0\5\15\31\0"+
    "\1\263\74\0\1\264\51\0\1\265\51\0\1\15\1\0"+
    "\2\15\4\0\13\15\1\266\1\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\267\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\2\15\1\270\2\15\21\0\1\15\1\0\2\15\4\0"+
    "\12\15\1\271\2\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\6\15\1\272"+
    "\6\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\7\15\1\273\5\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\14\15\1\274\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\12\15"+
    "\1\275\2\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\1\15\1\276\13\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\277\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\3\15\1\300\11\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\6\15\1\301"+
    "\6\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\12\15\1\302\2\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\7\15\1\303\5\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\304\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\12\15\1\305"+
    "\2\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\306\14\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\307\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\0\3\15\1\310\1\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\0\3\15\1\311\1\15\21\0\1\15"+
    "\1\0\2\15\4\0\13\15\1\312\1\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\6\15\1\313\6\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\1\314"+
    "\14\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\12\15\1\315\2\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\14\15\1\316\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\1\317"+
    "\14\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\2\15\1\320\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\6\15\1\321\6\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\3\15"+
    "\1\322\11\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\7\15\1\323\5\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\324\2\0\1\15\1\0"+
    "\3\15\1\0\1\325\4\15\21\0\1\15\1\0\2\15"+
    "\4\0\14\15\1\326\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\15\15\2\0"+
    "\1\15\1\0\3\15\1\0\1\327\4\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\330\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\331\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\12\15\1\332"+
    "\2\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\6\15\1\333\6\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\14\15\1\324\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\16\0\2\177\1\334\60\177\4\255\1\257"+
    "\60\255\1\335\60\255\16\0\1\336\47\0\1\15\1\0"+
    "\2\15\4\0\10\15\1\337\4\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\4\15\1\340\10\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\44\0\1\341\47\0\1\342\76\0\1\343\36\0"+
    "\1\15\1\0\2\15\4\0\1\344\14\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\345\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\346\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\347\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\12\15\1\350\2\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\13\15\1\351"+
    "\1\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\3\15\1\352\11\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\0\3\15\1\0"+
    "\4\15\1\353\21\0\1\15\1\0\2\15\4\0\10\15"+
    "\1\354\4\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\0\3\15\1\355\1\15\21\0\1\15"+
    "\1\0\2\15\4\0\14\15\1\356\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\357\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\13\15\1\360"+
    "\1\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\15\1\361\13\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\6\15\1\362\6\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\15\15\2\0\1\363\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\6\15\1\364\6\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\0\3\15\1\0"+
    "\1\15\1\365\3\15\21\0\1\15\1\0\2\15\4\0"+
    "\14\15\1\366\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\4\15\1\367\10\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\5\15\1\370\7\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\10\15\1\371\4\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\1\372"+
    "\14\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\3\15\1\0\1\373\4\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\374\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\0\1\15\1\375\3\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\376\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\5\15\1\377\7\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\2\15\1\u0100\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\3\15\1\u0101\11\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\14\15\1\u0102\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\11\15"+
    "\1\u0103\3\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\3\15\1\u0104\11\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\u0105\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\u0106\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\6\15"+
    "\1\u0107\6\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\35\0\1\u0108\46\0\1\15\1\0\2\15\4\0\14\15"+
    "\1\u0109\2\0\1\15\1\0\3\15\1\0\5\15\31\0"+
    "\1\u010a\101\0\1\u010b\46\0\1\u010c\47\0\1\15\1\0"+
    "\2\15\4\0\14\15\1\u010d\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\1\u010e"+
    "\14\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\12\15\1\u010f\2\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\13\15\1\u0110\1\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\14\15\1\u0111\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\u0112\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\15\15\2\0\1\15\1\0\3\15\1\u0113\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\3\15\1\u0114\11\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\u0115\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\5\15\1\u0116\7\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\7\15"+
    "\1\u0117\5\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\5\15\1\u0118\7\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\7\15\1\u0119\5\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\u011a\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\0\1\u011b\4\15\21\0"+
    "\1\15\1\0\2\15\4\0\3\15\1\u011c\11\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\3\15\1\u011d\11\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\14\15\1\u011e\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\6\15\1\u011f\6\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\1\15\1\u0120\13\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\15\15\2\0\1\15\1\0\3\15\1\0\3\15"+
    "\1\u0121\1\15\21\0\1\15\1\0\2\15\4\0\6\15"+
    "\1\u0122\6\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\1\u0123\14\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\1\15\1\u0124\13\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\31\0\1\u0125\52\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\0\3\15\1\u0126"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\15\15\2\0"+
    "\1\15\1\0\3\15\1\u0127\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\3\15\1\u0128\11\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\13\15\1\u0129\1\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\14\15\1\u012a"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\4\15\1\u012b\21\0\1\15\1\0\2\15\4\0"+
    "\1\u012c\14\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\7\15\1\u012d\5\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\36\0\1\u012e"+
    "\45\0\1\15\1\0\2\15\4\0\3\15\1\u012f\11\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\45\0\1\u0130"+
    "\61\0\1\u0131\47\0\1\u0132\52\0\1\15\1\0\2\15"+
    "\4\0\3\15\1\u0133\11\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\1\15\1\u0134\1\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\6\15\1\u0135\6\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\1\15\1\u0136\3\15\21\0\1\15\1\0\2\15"+
    "\4\0\1\15\1\u0137\13\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\31\0\1\u0138\110\0\1\u0139\24\0\1\15"+
    "\1\0\2\15\4\0\6\15\1\u013a\6\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\6\15\1\u013b\5\15\1\u013c\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\7\15\1\u013d\5\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\7\15\1\u013e"+
    "\5\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\7\15\1\u013f\5\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\15\15\2\0\1\15\1\u0140\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\6\15\1\u0141"+
    "\6\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\3\15\1\u0142\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\3\15\1\u0143\11\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\15\15\2\0"+
    "\1\15\1\0\1\15\1\u0144\1\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\3\15\1\0\1\u0145\4\15\21\0\1\15\1\0\2\15"+
    "\4\0\4\15\1\u0146\10\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\13\15"+
    "\1\u0147\1\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\15\15\2\0\1\15"+
    "\1\0\3\15\1\0\1\15\1\u0148\3\15\32\0\1\u0149"+
    "\64\0\1\u014a\57\0\1\u014b\52\0\1\15\1\0\2\15"+
    "\4\0\15\15\2\0\1\15\1\0\3\15\1\u014c\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\12\15\1\u014d\2\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\u014e\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\1\15\1\u014f\1\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\7\15\1\u0150\5\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\37\0\1\u0151"+
    "\57\0\1\u0152\77\0\1\u0153\63\0\1\u0154\31\0\1\15"+
    "\1\0\2\15\4\0\1\u0155\14\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\u0156\14\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\21\0\1\15\1\0\2\15\4\0\7\15\1\u0157\5\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\u0158\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\u0159\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\36\0\1\u015a\74\0\1\u015b\33\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\u015c\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\13\15\1\u015d\1\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u015e\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\1\u015f\14\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\15\1\u0160\13\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\31\0\1\u0161\52\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\u0162\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\13\15\1\u0163"+
    "\1\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\6\15\1\u0164\6\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\1\15\1\u0165\13\15\2\0\1\15\1\0"+
    "\3\15\1\0\5\15\31\0\1\u0166\67\0\1\u0167\60\0"+
    "\1\u0168\47\0\1\15\1\0\2\15\4\0\1\u0169\14\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\57\0\1\u016a"+
    "\24\0\1\15\1\0\2\15\4\0\1\u016b\14\15\2\0"+
    "\1\15\1\0\3\15\1\0\5\15\21\0\1\15\1\0"+
    "\2\15\4\0\1\u016c\14\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\31\0\1\u016d\70\0\1\u016e\44\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\1\u016f"+
    "\2\15\1\0\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\u0170\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\7\15\1\u0171"+
    "\5\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\3\15\1\u0172\5\15\37\0\1\u0173\62\0\1\u0174\44\0"+
    "\1\15\1\0\2\15\4\0\15\15\2\0\1\15\1\0"+
    "\3\15\1\u0175\5\15\21\0\1\15\1\0\2\15\4\0"+
    "\1\u0176\14\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\57\0\1\u0177\24\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\0\1\15\1\u0178\3\15"+
    "\21\0\1\15\1\0\2\15\4\0\13\15\1\u0179\1\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\36\0\1\u017a"+
    "\45\0\1\15\1\0\2\15\4\0\1\15\1\u017b\13\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\6\15\1\u017c\6\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\12\15\1\u017d\2\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u017e\5\15\40\0\1\u017f"+
    "\61\0\1\u0180\54\0\1\u0181\52\0\1\15\1\0\2\15"+
    "\4\0\14\15\1\u0182\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\50\0\1\u0183\33\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\u0184\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\15\15\2\0"+
    "\1\15\1\0\3\15\1\0\1\15\1\u0185\3\15\52\0"+
    "\1\u0186\61\0\1\u0187\32\0\1\15\1\0\2\15\4\0"+
    "\6\15\1\u0188\6\15\2\0\1\15\1\0\3\15\1\0"+
    "\5\15\21\0\1\15\1\0\2\15\4\0\12\15\1\u0189"+
    "\2\15\2\0\1\15\1\0\3\15\1\0\5\15\21\0"+
    "\1\15\1\0\2\15\4\0\1\u018a\14\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\32\0\1\u018b\110\0\1\u018c"+
    "\45\0\1\u018d\51\0\1\u018e\51\0\1\15\1\0\2\15"+
    "\4\0\15\15\2\0\1\15\1\0\3\15\1\0\1\15"+
    "\1\u018f\3\15\32\0\1\u0190\51\0\1\15\1\0\2\15"+
    "\4\0\1\15\1\u0191\13\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u0192\5\15\37\0\1\u0193"+
    "\44\0\1\15\1\0\2\15\4\0\13\15\1\u0194\1\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\u0195\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u0196\5\15\45\0\1\u0197"+
    "\61\0\1\u0198\50\0\1\u0199\70\0\1\u019a\43\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\3\15\1\u019b\1\15\37\0\1\u019c\44\0\1\15"+
    "\1\0\2\15\4\0\12\15\1\u019d\2\15\2\0\1\15"+
    "\1\0\3\15\1\0\5\15\21\0\1\15\1\0\2\15"+
    "\4\0\1\15\1\u019e\13\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\37\0\1\u019f\44\0\1\15\1\0\2\15"+
    "\4\0\12\15\1\u01a0\2\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u01a1\5\15\21\0\1\15"+
    "\1\0\2\15\4\0\15\15\2\0\1\15\1\0\3\15"+
    "\1\0\1\15\1\u01a2\3\15\45\0\1\u01a3\65\0\1\u01a4"+
    "\57\0\1\u01a5\62\0\1\u01a6\36\0\1\15\1\0\2\15"+
    "\4\0\1\15\1\u01a7\13\15\2\0\1\15\1\0\3\15"+
    "\1\0\5\15\21\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u01a8\5\15\34\0\1\u01a9"+
    "\106\0\1\u01aa\23\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u01ab\5\15\32\0\1\u01ac"+
    "\64\0\1\u01ad\60\0\1\u01ae\74\0\1\u01af\62\0\1\u01b0"+
    "\37\0\1\15\1\0\2\15\4\0\3\15\1\u01b1\11\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\43\0\1\u01b2"+
    "\70\0\1\u01b3\32\0\1\15\1\0\2\15\4\0\15\15"+
    "\2\0\1\15\1\0\3\15\1\u01b4\5\15\34\0\1\u01b5"+
    "\47\0\1\15\1\0\2\15\4\0\1\15\1\u01b6\13\15"+
    "\2\0\1\15\1\0\3\15\1\0\5\15\56\0\1\u01b7"+
    "\47\0\1\u01b8\63\0\1\u01b9\74\0\1\u01ba\40\0\1\u01bb"+
    "\1\u01bc\1\0\1\u01bd\1\u01be\53\0\1\u01bf\101\0\1\u01c0"+
    "\71\0\1\u01c1\50\0\1\u01c2\46\0\1\u01c3\113\0\1\u01c4"+
    "\31\0\1\u01c5\52\0\1\15\1\0\2\15\4\0\6\15"+
    "\1\u01c6\6\15\2\0\1\15\1\0\3\15\1\0\5\15"+
    "\45\0\1\u01c7\51\0\1\u01c8\57\0\1\u01c9\70\0\1\u01ca"+
    "\62\0\1\u01cb\102\0\1\u01cc\42\0\1\u01cd\54\0\1\u01ce"+
    "\63\0\1\u01cf\62\0\1\u01d0\74\0\1\u01d1\56\0\1\u01d2"+
    "\65\0\1\u01d3\67\0\1\u01d4\70\0\1\u01d5\44\0\1\u01d6"+
    "\75\0\1\u01d7\53\0\1\u01d8\47\0\1\u01d9\71\0\1\u01da"+
    "\62\0\1\u01db\65\0\1\u01dc\57\0\1\u01dd\53\0\1\u01de"+
    "\66\0\1\u01df\70\0\1\u01e0\63\0\1\u01e1\55\0\1\u01e2"+
    "\62\0\1\u01e3\62\0\1\u01e4\67\0\1\u01e5\47\0\1\u01e6"+
    "\110\0\1\u01e7\43\0\1\u01e8\66\0\1\u01e9\56\0\1\u01ea"+
    "\66\0\1\u01eb\75\0\1\u01ec\61\0\1\u01ed\41\0\1\u01ee"+
    "\65\0\1\u01ef\65\0\1\u01f0\56\0\1\u01f1\66\0\1\u01f2"+
    "\63\0\1\u01f3\47\0\1\u01f4\63\0\1\u01f5\63\0\1\u01f6"+
    "\67\0\1\u01f7\67\0\1\u01f8\60\0\1\u01f9\76\0\1\u01fa"+
    "\47\0\1\u01fb\47\0\1\u01fc\75\0\1\u01fd\50\0\1\u01fe"+
    "\107\0\1\u01ff\62\0\1\u0200\35\0\1\u0201\73\0\1\u0202"+
    "\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22236];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\12\1\1\11\16\1\1\11\1\1\1\11"+
    "\10\1\11\11\14\1\2\0\1\11\1\0\1\11\1\0"+
    "\2\1\2\0\1\11\1\0\2\11\35\1\5\11\6\1"+
    "\2\0\1\11\2\1\3\0\2\1\3\0\45\1\2\0"+
    "\1\1\2\0\2\1\3\0\46\1\2\11\1\0\2\1"+
    "\3\0\32\1\1\0\11\1\1\0\1\1\3\0\5\1"+
    "\2\0\21\1\3\0\6\1\1\0\1\1\3\0\5\1"+
    "\2\0\6\1\1\11\1\1\1\0\6\1\1\11\3\0"+
    "\1\1\1\0\2\1\1\11\1\0\1\11\1\0\5\1"+
    "\2\0\2\1\1\0\2\1\1\0\4\1\3\0\1\1"+
    "\1\0\2\1\2\0\3\1\4\0\1\1\1\0\2\1"+
    "\1\0\3\1\4\0\1\1\1\0\2\1\1\0\1\11"+
    "\3\1\4\0\1\1\1\11\1\1\2\0\1\1\3\0"+
    "\1\11\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\4\0\1\1\10\0\1\11\1\1\1\0\1\11"+
    "\2\0\1\1\15\0\1\11\1\0\1\1\3\0\1\11"+
    "\2\0\1\11\16\0\1\11\4\0\1\11\2\0\2\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\4\0\2\11"+
    "\1\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private SmPLCodeLang lang = SmPLCodeLang.Transformation;

    public _SmPLLexer() {
      this((java.io.Reader)null);
    }

    private IElementType exitCodeBlock() {
        yybegin(AFTER_CODE_BLOCK);
        switch (this.lang) {
            case Ocaml: return OCAML_BLOCK;
            case Python: return PYTHON_BLOCK;
            case Transformation: return TRANSFORMATION_BLOCK;
            default: throw new RuntimeException("Unhandled language: " + this.lang);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SmPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 95: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 96: break;
          case 3: 
            { return WORD;
            }
          case 97: break;
          case 4: 
            { return DIGITS;
            }
          case 98: break;
          case 5: 
            { this.lang = SmPLCodeLang.Transformation; yybegin(METAVARS); return AT;
            }
          case 99: break;
          case 6: 
            { return STAR;
            }
          case 100: break;
          case 7: 
            { return AT;
            }
          case 101: break;
          case 8: 
            { return COLON;
            }
          case 102: break;
          case 9: 
            { return NOT;
            }
          case 103: break;
          case 10: 
            { return EQUALS;
            }
          case 104: break;
          case 11: 
            { return AND;
            }
          case 105: break;
          case 12: 
            { return OR;
            }
          case 106: break;
          case 13: 
            { return COMMA;
            }
          case 107: break;
          case 14: 
            { return SEMI;
            }
          case 108: break;
          case 15: 
            { return LPAREN;
            }
          case 109: break;
          case 16: 
            { return RPAREN;
            }
          case 110: break;
          case 17: 
            { return LBRACK;
            }
          case 111: break;
          case 18: 
            { return RBRACK;
            }
          case 112: break;
          case 19: 
            { return LBRACE;
            }
          case 113: break;
          case 20: 
            { return RBRACE;
            }
          case 114: break;
          case 21: 
            { return DOT;
            }
          case 115: break;
          case 22: 
            { this.zzMarkedPos = this.zzEndRead; return this.exitCodeBlock();
            }
          case 116: break;
          case 23: 
            { return LINE_COMMENT;
            }
          case 117: break;
          case 24: 
            { return STRING;
            }
          case 118: break;
          case 25: 
            { return SYSPATH;
            }
          case 119: break;
          case 26: 
            { this.lang = SmPLCodeLang.Transformation; yybegin(METAVARS); return DOUBLE_AT;
            }
          case 120: break;
          case 27: 
            { return LEFT_LEFT;
            }
          case 121: break;
          case 28: 
            { return CONCAT;
            }
          case 122: break;
          case 29: 
            { return NOT_EQUALS;
            }
          case 123: break;
          case 30: 
            { return REGEXP_NOT_MATCHES;
            }
          case 124: break;
          case 31: 
            { return REGEXP_MATCHES;
            }
          case 125: break;
          case 32: 
            { return DOUBLE_AND;
            }
          case 126: break;
          case 33: 
            { return DOUBLE_OR;
            }
          case 127: break;
          case 34: 
            { yybegin(CODE_BLOCK); return DOUBLE_AT;
            }
          case 128: break;
          case 35: 
            { this.yypushback(1); return this.exitCodeBlock();
            }
          case 129: break;
          case 36: 
            { return DOC_COMMENT;
            }
          case 130: break;
          case 37: 
            { return BLOCK_COMMENT;
            }
          case 131: break;
          case 38: 
            { return EVER;
            }
          case 132: break;
          case 39: 
            { return TYPE;
            }
          case 133: break;
          case 40: 
            { return USING_INCLUDE;
            }
          case 134: break;
          case 41: 
            { return NEVER;
            }
          case 135: break;
          case 42: 
            { return USING;
            }
          case 136: break;
          case 43: 
            { return FIELD;
            }
          case 137: break;
          case 44: 
            { this.lang = SmPLCodeLang.Ocaml; return OCAML;
            }
          case 138: break;
          case 45: 
            { return EXISTS;
            }
          case 139: break;
          case 46: 
            { return SYMBOL;
            }
          case 140: break;
          case 47: 
            { this.lang = SmPLCodeLang.Python; return PYTHON;
            }
          case 141: break;
          case 48: 
            { return FORALL;
            }
          case 142: break;
          case 49: 
            { return FORMAT;
            }
          case 143: break;
          case 50: 
            { return VIRTUAL_INCLUDE;
            }
          case 144: break;
          case 51: 
            { return DISABLE;
            }
          case 145: break;
          case 52: 
            { return EXTENDS;
            }
          case 146: break;
          case 53: 
            { return SCRIPT_COLON;
            }
          case 147: break;
          case 54: 
            { return VIRTUAL;
            }
          case 148: break;
          case 55: 
            { return TYPEDEF;
            }
          case 149: break;
          case 56: 
            { return FILE_IN;
            }
          case 150: break;
          case 57: 
            { return HASH_INCLUDE;
            }
          case 151: break;
          case 58: 
            { yybegin(SCRIPT_METAVARS); return AT_SCRIPT_COLON;
            }
          case 152: break;
          case 59: 
            { return ITERATOR;
            }
          case 153: break;
          case 60: 
            { return CONSTANT;
            }
          case 154: break;
          case 61: 
            { return DECLARER;
            }
          case 155: break;
          case 62: 
            { return POSITION;
            }
          case 156: break;
          case 63: 
            { return STATEMENT;
            }
          case 157: break;
          case 64: 
            { return ATTRIBUTE;
            }
          case 158: break;
          case 65: 
            { return PARAMETER;
            }
          case 159: break;
          case 66: 
            { yybegin(SCRIPT_METAVARS); return AT_FINALIZE_COLON;
            }
          case 160: break;
          case 67: 
            { return IDENTIFIER;
            }
          case 161: break;
          case 68: 
            { return DEPENDS_ON;
            }
          case 162: break;
          case 69: 
            { return EXPRESSION;
            }
          case 163: break;
          case 70: 
            { return FIELD_LIST;
            }
          case 164: break;
          case 71: 
            { return INITIALIZER;
            }
          case 165: break;
          case 72: 
            { return DECLARATION;
            }
          case 166: break;
          case 73: 
            { return FORMAT_LIST;
            }
          case 167: break;
          case 74: 
            { yybegin(SCRIPT_METAVARS); return AT_INITIALIZE_COLON;
            }
          case 168: break;
          case 75: 
            { return IDEXPRESSION;
            }
          case 169: break;
          case 76: 
            { return POSITION_ANY;
            }
          case 170: break;
          case 77: 
            { return METAVARIABLE;
            }
          case 171: break;
          case 78: 
            { return ITERATOR_NAME;
            }
          case 172: break;
          case 79: 
            { return DECLARER_NAME;
            }
          case 173: break;
          case 80: 
            { return UNARY_OPERATOR;
            }
          case 174: break;
          case 81: 
            { return STATEMENT_LIST;
            }
          case 175: break;
          case 82: 
            { return ATTRIBUTE_NAME;
            }
          case 176: break;
          case 83: 
            { return PARAMETER_LIST;
            }
          case 177: break;
          case 84: 
            { return IDENTIFIER_LIST;
            }
          case 178: break;
          case 85: 
            { return EXPRESSION_LIST;
            }
          case 179: break;
          case 86: 
            { return EXPRESSION_ENUM;
            }
          case 180: break;
          case 87: 
            { return BINARY_OPERATOR;
            }
          case 181: break;
          case 88: 
            { return INITIALIZER_LIST;
            }
          case 182: break;
          case 89: 
            { return EXPRESSION_UNION;
            }
          case 183: break;
          case 90: 
            { return FRESH_IDENTIFIER;
            }
          case 184: break;
          case 91: 
            { return EXPRESSION_STRUCT;
            }
          case 185: break;
          case 92: 
            { return LOCAL_IDEXPRESSION;
            }
          case 186: break;
          case 93: 
            { return GLOBAL_IDEXPRESSION;
            }
          case 187: break;
          case 94: 
            { return ASSIGNMENT_OPERATOR;
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

