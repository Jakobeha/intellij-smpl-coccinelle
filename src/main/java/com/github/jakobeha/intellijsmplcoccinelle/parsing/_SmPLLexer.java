/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.github.jakobeha.intellijsmplcoccinelle.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.jakobeha.intellijsmplcoccinelle.psi.SmPLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/main/kotlin/com/github/jakobeha/intellijsmplcoccinelle/parsing/_SmPLLexer.flex</tt>
 */
@SuppressWarnings("ALL")
public class _SmPLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\1\2\10\1\2\22\0\1\51\1\14\1\5\1\32\2\0\1\15\1\0\1\22\1\23\1\20"+
    "\1\0\1\17\1\0\1\30\1\0\12\3\1\12\1\11\1\6\1\21\1\7\1\0\1\13\2\4\1\62\1\4\1"+
    "\66\1\4\1\73\1\4\1\71\4\4\1\72\1\4\1\65\1\4\1\70\1\4\1\63\3\4\1\67\1\64\1"+
    "\4\1\24\1\0\1\25\1\0\1\4\1\0\1\45\1\55\1\35\1\40\1\41\1\53\1\54\1\57\1\33"+
    "\2\4\1\36\1\60\1\34\1\52\1\50\1\4\1\43\1\47\1\44\1\37\1\42\1\4\1\46\1\56\1"+
    "\61\1\26\1\16\1\27\1\31\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\1\23\4"+
    "\1\25\1\26\1\0\1\27\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\0\36\4\1\0"+
    "\43\4\1\0\14\4\1\40\4\4\1\41\21\4\1\42"+
    "\1\4\1\0\4\4\1\43\3\4\1\44\20\4\1\0"+
    "\1\45\6\4\1\46\1\4\1\0\5\4\2\0\3\4"+
    "\1\47\6\4\1\50\1\4\1\51\3\4\3\0\1\52"+
    "\1\53\4\4\1\0\5\4\2\0\1\54\3\4\1\55"+
    "\1\4\1\56\1\57\6\4\1\60\5\0\1\4\1\61"+
    "\1\62\3\4\1\63\1\64\2\0\1\65\1\4\1\0"+
    "\5\4\1\66\1\67\5\0\4\4\4\0\1\4\1\0"+
    "\1\4\1\70\1\4\1\71\1\72\6\0\1\4\1\73"+
    "\1\74\1\4\4\0\1\4\1\75\1\76\1\0\1\4"+
    "\3\0\1\77\4\0\1\4\1\100\1\0\1\4\4\0"+
    "\1\101\7\0\1\102\2\0\1\4\2\0\1\103\14\0"+
    "\1\104\3\0\1\105\2\0\1\106\2\0\1\107\16\0"+
    "\1\110\4\0\1\111\1\0\1\112\1\113\4\0\1\114"+
    "\1\0\1\115\1\0\1\116\4\0\1\117\1\120\1\0"+
    "\1\121\2\0\1\122\2\0\1\123\2\0\1\124\2\0"+
    "\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\74\0\74\0\74\0\u01e0\0\u021c\0\u0258\0\74\0\74"+
    "\0\u0294\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u0168\0\74"+
    "\0\u07f8\0\u07f8\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u012c\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u012c\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u012c"+
    "\0\u2184\0\u21c0\0\u21fc\0\u012c\0\u2238\0\u2274\0\u22b0\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u012c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\u012c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u012c\0\u2c10\0\u012c\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u012c\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u012c"+
    "\0\u30c0\0\u30fc\0\u3138\0\u012c\0\u3174\0\u012c\0\u012c\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\74\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u012c\0\74\0\u3480\0\u34bc"+
    "\0\u34f8\0\u3534\0\u012c\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660"+
    "\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u012c\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4"+
    "\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\74\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128"+
    "\0\u4164\0\74\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u012c\0\u4470"+
    "\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\74\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u012c\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\74\0\u4a10\0\u4a4c\0\u4a88\0\u012c\0\u4ac4\0\u4b00"+
    "\0\74\0\u4b3c\0\u4b78\0\74\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68"+
    "\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48"+
    "\0\u4e84\0\u4ec0\0\74\0\u4efc\0\u4f38\0\u4f74\0\u4fb0\0\74"+
    "\0\u4fec\0\74\0\74\0\u5028\0\u5064\0\u50a0\0\u50dc\0\74"+
    "\0\u5118\0\74\0\u5154\0\74\0\u5190\0\u51cc\0\u5208\0\u5244"+
    "\0\74\0\74\0\u5280\0\74\0\u52bc\0\u52f8\0\74\0\u5334"+
    "\0\u5370\0\74\0\u53ac\0\u53e8\0\74\0\u5424\0\u5460\0\74"+
    "\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\4\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\1\6\1\44"+
    "\1\45\1\4\1\6\1\46\1\47\1\50\2\6\1\51"+
    "\1\6\1\52\3\6\1\53\2\6\1\54\2\6\75\0"+
    "\2\4\5\0\1\4\1\55\1\56\36\0\1\4\23\0"+
    "\2\4\5\0\1\4\40\0\1\4\25\0\1\5\73\0"+
    "\2\6\26\0\16\6\1\0\22\6\5\57\1\60\66\57"+
    "\6\61\1\62\1\63\64\61\21\0\1\64\7\0\1\65"+
    "\57\0\1\66\74\0\1\67\106\0\1\70\74\0\1\71"+
    "\1\72\43\0\2\6\26\0\1\6\1\73\3\6\1\74"+
    "\3\6\1\75\4\6\1\0\22\6\3\0\2\6\26\0"+
    "\6\6\1\76\7\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\0\1\77\21\6\3\0\2\6\26\0\16\6"+
    "\1\0\1\100\21\6\3\0\2\6\26\0\1\6\1\101"+
    "\12\6\1\102\1\6\1\0\22\6\3\0\2\6\26\0"+
    "\1\103\5\6\1\104\7\6\1\0\22\6\3\0\2\6"+
    "\26\0\7\6\1\105\3\6\1\106\2\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\107\15\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\4\6\1\110\15\6\3\0"+
    "\2\6\26\0\11\6\1\111\2\6\1\112\1\6\1\0"+
    "\22\6\3\0\2\6\26\0\2\6\1\113\6\6\1\114"+
    "\4\6\1\0\4\6\1\115\15\6\3\0\2\6\26\0"+
    "\12\6\1\116\3\6\1\0\1\117\21\6\3\0\2\6"+
    "\26\0\1\120\7\6\1\121\5\6\1\0\1\122\21\6"+
    "\3\0\2\6\26\0\3\6\1\123\12\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\124\15\6\1\0\22\6\3\0"+
    "\2\6\26\0\6\6\1\125\7\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\11\6\1\126\10\6\3\0"+
    "\2\6\26\0\16\6\1\0\15\6\1\127\4\6\3\0"+
    "\2\6\26\0\16\6\1\0\20\6\1\130\1\6\1\55"+
    "\2\0\71\55\1\56\2\0\71\56\7\61\1\63\64\61"+
    "\34\0\1\131\42\0\2\6\26\0\1\132\15\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\133\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\134\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\7\6\1\135\6\6\1\0"+
    "\22\6\3\0\2\6\26\0\1\6\1\136\14\6\1\0"+
    "\22\6\3\0\2\6\26\0\2\6\1\137\13\6\1\0"+
    "\22\6\3\0\2\6\26\0\12\6\1\140\3\6\1\0"+
    "\22\6\3\0\2\6\26\0\1\141\15\6\1\0\22\6"+
    "\3\0\2\6\26\0\14\6\1\142\1\6\1\0\22\6"+
    "\3\0\2\6\26\0\2\6\1\143\12\6\1\144\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\145\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\1\146\10\6\1\147\3\6"+
    "\1\150\1\0\22\6\3\0\2\6\26\0\10\6\1\151"+
    "\5\6\1\0\22\6\3\0\2\6\26\0\15\6\1\152"+
    "\1\0\22\6\3\0\2\6\26\0\11\6\1\153\4\6"+
    "\1\0\22\6\3\0\2\6\26\0\14\6\1\154\1\6"+
    "\1\0\22\6\3\0\2\6\26\0\10\6\1\155\5\6"+
    "\1\0\22\6\3\0\2\6\26\0\12\6\1\156\3\6"+
    "\1\0\22\6\3\0\2\6\26\0\16\6\1\0\6\6"+
    "\1\157\13\6\3\0\2\6\26\0\10\6\1\160\5\6"+
    "\1\0\22\6\3\0\2\6\26\0\14\6\1\161\1\6"+
    "\1\0\22\6\3\0\2\6\26\0\1\6\1\162\1\6"+
    "\1\163\2\6\1\164\7\6\1\0\22\6\3\0\2\6"+
    "\26\0\6\6\1\165\7\6\1\0\22\6\3\0\2\6"+
    "\26\0\10\6\1\166\5\6\1\0\22\6\3\0\2\6"+
    "\26\0\16\6\1\0\1\167\21\6\3\0\2\6\26\0"+
    "\1\6\1\170\14\6\1\0\22\6\3\0\2\6\26\0"+
    "\11\6\1\171\4\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\0\12\6\1\172\7\6\3\0\2\6\26\0"+
    "\16\6\1\0\13\6\1\173\6\6\3\0\2\6\26\0"+
    "\16\6\1\0\11\6\1\174\10\6\35\0\1\175\41\0"+
    "\2\6\26\0\11\6\1\176\4\6\1\0\22\6\3\0"+
    "\2\6\26\0\1\6\1\177\11\6\1\200\2\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\201\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\202\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\14\6\1\203\1\6\1\0"+
    "\22\6\3\0\2\6\26\0\12\6\1\204\3\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\205\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\1\6\1\206\14\6\1\0"+
    "\22\6\3\0\2\6\26\0\12\6\1\207\3\6\1\0"+
    "\22\6\3\0\2\6\26\0\3\6\1\210\12\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\211\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\212\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\14\6\1\213\1\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\214\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\215\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\11\6\1\216\4\6\1\0"+
    "\22\6\3\0\2\6\26\0\6\6\1\217\7\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\220\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\1\221\15\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\222\15\6\1\0\22\6\3\0"+
    "\2\6\26\0\11\6\1\223\4\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\3\6\1\224\16\6\3\0"+
    "\2\6\26\0\12\6\1\225\3\6\1\0\22\6\3\0"+
    "\2\6\26\0\1\226\15\6\1\0\22\6\3\0\2\6"+
    "\26\0\12\6\1\227\3\6\1\0\22\6\3\0\2\6"+
    "\26\0\6\6\1\230\7\6\1\0\22\6\3\0\2\6"+
    "\26\0\3\6\1\231\12\6\1\0\22\6\3\0\2\6"+
    "\26\0\14\6\1\232\1\6\1\0\22\6\3\0\2\6"+
    "\26\0\12\6\1\233\3\6\1\0\6\6\1\234\13\6"+
    "\3\0\2\6\26\0\16\6\1\0\3\6\1\235\16\6"+
    "\3\0\2\6\26\0\12\6\1\236\3\6\1\0\22\6"+
    "\3\0\2\6\26\0\12\6\1\237\3\6\1\0\22\6"+
    "\3\0\2\6\26\0\16\6\1\0\13\6\1\240\6\6"+
    "\3\0\2\6\26\0\16\6\1\0\16\6\1\241\3\6"+
    "\3\0\2\6\26\0\16\6\1\0\14\6\1\242\5\6"+
    "\36\0\1\243\40\0\2\6\26\0\1\244\15\6\1\0"+
    "\22\6\3\0\2\6\26\0\11\6\1\245\4\6\1\0"+
    "\22\6\3\0\2\6\26\0\15\6\1\246\1\0\22\6"+
    "\3\0\2\6\26\0\12\6\1\247\3\6\1\0\22\6"+
    "\3\0\2\6\26\0\10\6\1\250\5\6\1\0\22\6"+
    "\3\0\2\6\26\0\11\6\1\251\4\6\1\0\22\6"+
    "\3\0\2\6\26\0\3\6\1\252\12\6\1\0\22\6"+
    "\3\0\2\6\26\0\16\6\1\0\4\6\1\253\15\6"+
    "\3\0\2\6\26\0\16\6\1\0\2\6\1\254\17\6"+
    "\3\0\2\6\26\0\16\6\1\0\3\6\1\255\16\6"+
    "\3\0\2\6\26\0\12\6\1\256\3\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\6\1\257\14\6\1\0\22\6"+
    "\3\0\2\6\26\0\11\6\1\260\4\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\6\1\261\14\6\1\0\22\6"+
    "\3\0\2\6\26\0\6\6\1\262\7\6\1\0\22\6"+
    "\3\0\2\6\26\0\4\6\1\263\11\6\1\0\22\6"+
    "\3\0\2\6\26\0\5\6\1\264\10\6\1\0\22\6"+
    "\3\0\2\6\26\0\1\265\15\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\2\6\1\266\17\6\3\0"+
    "\2\6\26\0\15\6\1\267\1\0\22\6\3\0\2\6"+
    "\26\0\6\6\1\270\7\6\1\0\22\6\3\0\2\6"+
    "\26\0\16\6\1\0\1\271\21\6\3\0\2\6\26\0"+
    "\16\6\1\0\6\6\1\272\13\6\3\0\2\6\26\0"+
    "\11\6\1\273\4\6\1\0\22\6\3\0\2\6\26\0"+
    "\3\6\1\274\12\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\275\22\6\3\0\2\6\26\0\5\6\1\276"+
    "\10\6\1\0\22\6\3\0\2\6\26\0\16\6\1\0"+
    "\5\6\1\277\14\6\3\0\2\6\26\0\3\6\1\300"+
    "\12\6\1\0\22\6\3\0\2\6\26\0\12\6\1\301"+
    "\3\6\1\0\22\6\3\0\2\6\26\0\12\6\1\302"+
    "\3\6\1\0\22\6\3\0\2\6\26\0\10\6\1\303"+
    "\5\6\1\0\22\6\3\0\2\6\26\0\7\6\1\304"+
    "\6\6\1\0\22\6\3\0\2\6\26\0\16\6\1\0"+
    "\14\6\1\305\5\6\3\0\2\6\26\0\16\6\1\0"+
    "\21\6\1\306\37\0\1\307\37\0\2\6\26\0\12\6"+
    "\1\310\3\6\1\0\22\6\3\0\2\6\26\0\1\311"+
    "\15\6\1\0\22\6\3\0\2\6\26\0\10\6\1\312"+
    "\5\6\1\0\22\6\3\0\2\6\26\0\11\6\1\313"+
    "\4\6\1\0\22\6\3\0\2\6\26\0\12\6\1\314"+
    "\3\6\1\0\22\6\3\0\2\6\26\0\16\6\1\315"+
    "\22\6\3\0\2\6\26\0\16\6\1\316\22\6\3\0"+
    "\2\6\26\0\3\6\1\317\12\6\1\0\22\6\3\0"+
    "\2\6\26\0\10\6\1\320\5\6\1\0\22\6\3\0"+
    "\2\6\26\0\5\6\1\321\10\6\1\0\22\6\3\0"+
    "\2\6\26\0\14\6\1\322\1\6\1\0\22\6\3\0"+
    "\2\6\26\0\5\6\1\323\10\6\1\0\22\6\3\0"+
    "\2\6\26\0\14\6\1\324\1\6\1\0\22\6\3\0"+
    "\2\6\26\0\12\6\1\325\3\6\1\0\22\6\3\0"+
    "\2\6\26\0\6\6\1\326\7\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\3\6\1\327\16\6\3\0"+
    "\2\6\26\0\1\6\1\330\14\6\1\0\22\6\3\0"+
    "\2\6\26\0\11\6\1\331\4\6\1\0\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\6\6\1\332\13\6\3\0"+
    "\2\6\26\0\3\6\1\333\12\6\1\0\22\6\3\0"+
    "\2\6\26\0\6\6\1\334\7\6\1\0\22\6\3\0"+
    "\2\6\26\0\1\335\15\6\1\0\22\6\3\0\2\6"+
    "\26\0\1\336\15\6\1\0\22\6\33\0\1\337\43\0"+
    "\2\6\26\0\16\6\1\340\22\6\3\0\2\6\26\0"+
    "\16\6\1\341\22\6\3\0\2\6\26\0\3\6\1\342"+
    "\12\6\1\0\22\6\3\0\2\6\26\0\11\6\1\343"+
    "\4\6\1\0\22\6\3\0\2\6\26\0\3\6\1\344"+
    "\12\6\1\0\22\6\3\0\2\6\26\0\16\6\1\0"+
    "\4\6\1\345\15\6\3\0\2\6\26\0\12\6\1\346"+
    "\3\6\1\0\22\6\3\0\2\6\26\0\16\6\1\0"+
    "\14\6\1\347\5\6\40\0\1\350\36\0\2\6\26\0"+
    "\3\6\1\351\12\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\0\1\6\1\352\20\6\3\0\2\6\26\0"+
    "\6\6\1\353\7\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\0\1\354\21\6\3\0\2\6\26\0\1\6"+
    "\1\355\14\6\1\0\22\6\33\0\1\356\112\0\1\357"+
    "\24\0\2\6\26\0\6\6\1\360\7\6\1\0\22\6"+
    "\3\0\2\6\26\0\6\6\1\361\3\6\1\362\3\6"+
    "\1\0\22\6\3\0\2\6\26\0\14\6\1\363\1\6"+
    "\1\0\22\6\3\0\2\6\26\0\14\6\1\364\1\6"+
    "\1\0\22\6\3\0\2\6\26\0\14\6\1\365\1\6"+
    "\1\0\22\6\3\0\2\6\26\0\3\6\1\366\12\6"+
    "\1\0\22\6\3\0\2\6\26\0\16\6\1\0\1\6"+
    "\1\367\20\6\3\0\2\6\26\0\4\6\1\370\11\6"+
    "\1\0\22\6\3\0\2\6\26\0\16\6\1\0\6\6"+
    "\1\371\13\6\3\0\2\6\26\0\6\6\1\372\7\6"+
    "\1\0\22\6\3\0\2\6\26\0\11\6\1\373\4\6"+
    "\1\0\22\6\3\0\2\6\26\0\16\6\1\0\1\374"+
    "\21\6\3\0\2\6\26\0\16\6\1\0\7\6\1\375"+
    "\12\6\34\0\1\376\75\0\1\377\70\0\1\u0100\43\0"+
    "\2\6\26\0\16\6\1\u0101\22\6\3\0\2\6\26\0"+
    "\16\6\1\u0102\22\6\3\0\2\6\26\0\16\6\1\u0103"+
    "\22\6\3\0\2\6\26\0\10\6\1\u0104\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\16\6\1\0\16\6\1\u0105"+
    "\3\6\41\0\1\u0106\35\0\2\6\26\0\1\u0107\15\6"+
    "\1\0\22\6\3\0\2\6\26\0\1\u0108\15\6\1\0"+
    "\22\6\3\0\2\6\26\0\14\6\1\u0109\1\6\1\0"+
    "\22\6\3\0\2\6\26\0\10\6\1\u010a\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\11\6\1\u010b\4\6\1\0"+
    "\22\6\40\0\1\u010c\103\0\1\u010d\26\0\2\6\26\0"+
    "\10\6\1\u010e\5\6\1\0\22\6\3\0\2\6\26\0"+
    "\11\6\1\u010f\4\6\1\0\22\6\3\0\2\6\26\0"+
    "\16\6\1\u0110\22\6\3\0\2\6\26\0\1\u0111\15\6"+
    "\1\0\22\6\3\0\2\6\26\0\11\6\1\u0112\4\6"+
    "\1\0\22\6\3\0\2\6\26\0\6\6\1\u0113\7\6"+
    "\1\0\22\6\3\0\2\6\26\0\1\6\1\u0114\14\6"+
    "\1\0\22\6\3\0\2\6\26\0\6\6\1\u0115\7\6"+
    "\1\0\22\6\3\0\2\6\26\0\1\6\1\u0116\14\6"+
    "\1\0\22\6\3\0\2\6\26\0\6\6\1\u0117\7\6"+
    "\1\0\22\6\33\0\1\u0118\100\0\1\u0119\71\0\1\u011a"+
    "\70\0\1\u011b\112\0\1\u011c\24\0\2\6\26\0\1\u011d"+
    "\15\6\1\0\22\6\3\0\2\6\26\0\16\6\1\0"+
    "\7\6\1\u011e\12\6\3\0\2\6\26\0\6\6\1\u011f"+
    "\7\6\1\0\22\6\3\0\2\6\26\0\14\6\1\u0120"+
    "\1\6\1\0\22\6\3\0\2\6\26\0\16\6\1\u0121"+
    "\22\6\41\0\1\u0122\73\0\1\u0123\35\0\2\6\26\0"+
    "\16\6\1\u0124\22\6\3\0\2\6\26\0\1\u0125\15\6"+
    "\1\0\22\6\52\0\1\u0126\24\0\2\6\26\0\16\6"+
    "\1\0\1\u0127\21\6\3\0\2\6\26\0\6\6\1\u0128"+
    "\7\6\1\0\22\6\3\0\2\6\26\0\1\6\1\u0129"+
    "\14\6\1\0\22\6\3\0\2\6\26\0\11\6\1\u012a"+
    "\4\6\1\0\22\6\3\0\2\6\26\0\10\6\1\u012b"+
    "\5\6\1\0\22\6\3\0\2\6\26\0\16\6\1\u012c"+
    "\22\6\47\0\1\u012d\65\0\1\u012e\65\0\1\u012f\100\0"+
    "\1\u0130\103\0\1\u0131\26\0\2\6\26\0\12\6\1\u0132"+
    "\3\6\1\0\22\6\3\0\2\6\26\0\6\6\1\u0133"+
    "\7\6\1\0\22\6\3\0\2\6\26\0\10\6\1\u0134"+
    "\5\6\1\0\22\6\3\0\2\6\26\0\1\u0135\15\6"+
    "\1\0\22\6\34\0\1\u0136\105\0\1\u0137\70\0\1\u0138"+
    "\64\0\1\u0139\42\0\2\6\26\0\16\6\1\0\1\u013a"+
    "\21\6\34\0\1\u013b\42\0\2\6\26\0\1\6\1\u013c"+
    "\14\6\1\0\22\6\3\0\2\6\26\0\16\6\1\u013d"+
    "\22\6\3\0\2\6\26\0\11\6\1\u013e\4\6\1\0"+
    "\22\6\3\0\2\6\26\0\16\6\1\u013f\22\6\3\0"+
    "\2\6\26\0\16\6\1\u0140\22\6\45\0\1\u0141\72\0"+
    "\1\u0142\63\0\1\u0143\106\0\1\u0144\65\0\1\u0145\73\0"+
    "\1\u0146\35\0\2\6\26\0\16\6\1\0\3\6\1\u0147"+
    "\16\6\3\0\2\6\26\0\10\6\1\u0148\5\6\1\0"+
    "\22\6\3\0\2\6\26\0\16\6\1\u0149\22\6\3\0"+
    "\2\6\26\0\16\6\1\0\1\u014a\21\6\45\0\1\u014b"+
    "\76\0\1\u014c\70\0\1\u014d\73\0\1\u014e\31\0\2\6"+
    "\26\0\1\6\1\u014f\14\6\1\0\22\6\3\0\2\6"+
    "\26\0\16\6\1\u0150\22\6\34\0\1\u0151\42\0\2\6"+
    "\26\0\16\6\1\u0152\22\6\36\0\1\u0153\73\0\1\u0154"+
    "\71\0\1\u0155\103\0\1\u0156\73\0\1\u0157\75\0\1\u0158"+
    "\70\0\1\u0159\33\0\2\6\26\0\3\6\1\u015a\12\6"+
    "\1\0\22\6\3\0\2\6\26\0\16\6\1\u015b\22\6"+
    "\36\0\1\u015c\40\0\2\6\26\0\1\6\1\u015d\14\6"+
    "\1\0\22\6\60\0\1\u015e\56\0\1\u015f\74\0\1\u0160"+
    "\107\0\1\u0161\51\0\1\u0162\1\u0163\1\0\1\u0164\5\0"+
    "\1\u0165\71\0\1\u0166\100\0\1\u0167\54\0\1\u0168\73\0"+
    "\1\u0169\116\0\1\u016a\50\0\1\u016b\110\0\1\u016c\70\0"+
    "\1\u016d\31\0\2\6\26\0\6\6\1\u016e\7\6\1\0"+
    "\22\6\36\0\1\u016f\70\0\1\u0170\101\0\1\u0171\73\0"+
    "\1\u0172\104\0\1\u0173\62\0\1\u0174\65\0\1\u0175\74\0"+
    "\1\u0176\73\0\1\u0177\103\0\1\u0178\107\0\1\u0179\63\0"+
    "\1\u017a\72\0\1\u017b\73\0\1\u017c\77\0\1\u017d\63\0"+
    "\1\u017e\74\0\1\u017f\62\0\1\u0180\107\0\1\u0181\73\0"+
    "\1\u0182\67\0\1\u0183\77\0\1\u0184\57\0\1\u0185\77\0"+
    "\1\u0186\77\0\1\u0187\71\0\1\u0188\73\0\1\u0189\76\0"+
    "\1\u018a\73\0\1\u018b\62\0\1\u018c\101\0\1\u018d\104\0"+
    "\1\u018e\70\0\1\u018f\70\0\1\u0190\76\0\1\u0191\70\0"+
    "\1\u0192\101\0\1\u0193\101\0\1\u0194\52\0\1\u0195\77\0"+
    "\1\u0196\71\0\1\u0197\101\0\1\u0198\67\0\1\u0199\74\0"+
    "\1\u019a\62\0\1\u019b\74\0\1\u019c\74\0\1\u019d\103\0"+
    "\1\u019e\71\0\1\u019f\77\0\1\u01a0\76\0\1\u01a1\65\0"+
    "\1\u01a2\73\0\1\u01a3\62\0\1\u01a4\74\0\1\u01a5\111\0"+
    "\1\u01a6\73\0\1\u01a7\64\0\1\u01a8\64\0\1\u01a9\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\3\11\3\1\2\11\1\1\7\11"+
    "\26\1\1\0\1\11\1\0\1\1\7\11\1\0\36\1"+
    "\1\0\43\1\1\0\45\1\1\0\31\1\1\0\11\1"+
    "\1\0\5\1\2\0\20\1\3\0\6\1\1\0\5\1"+
    "\2\0\16\1\1\11\5\0\2\1\1\11\5\1\2\0"+
    "\2\1\1\0\7\1\5\0\4\1\4\0\1\1\1\0"+
    "\5\1\6\0\4\1\4\0\1\1\1\11\1\1\1\0"+
    "\1\1\3\0\1\11\4\0\2\1\1\0\1\1\4\0"+
    "\1\1\7\0\1\11\2\0\1\1\2\0\1\1\14\0"+
    "\1\11\3\0\1\1\2\0\1\11\2\0\1\11\16\0"+
    "\1\11\4\0\1\11\1\0\2\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SmPLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SmPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 87: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 88: break;
          case 3: 
            { return DIGITS;
            }
          case 89: break;
          case 4: 
            { return WORD;
            }
          case 90: break;
          case 5: 
            { return SEMI;
            }
          case 91: break;
          case 6: 
            { return COLON;
            }
          case 92: break;
          case 7: 
            { return AT;
            }
          case 93: break;
          case 8: 
            { return NOT;
            }
          case 94: break;
          case 9: 
            { return AND;
            }
          case 95: break;
          case 10: 
            { return OR;
            }
          case 96: break;
          case 11: 
            { return COMMA;
            }
          case 97: break;
          case 12: 
            { return STAR;
            }
          case 98: break;
          case 13: 
            { return EQUALS;
            }
          case 99: break;
          case 14: 
            { return LPAREN;
            }
          case 100: break;
          case 15: 
            { return RPAREN;
            }
          case 101: break;
          case 16: 
            { return LBRACK;
            }
          case 102: break;
          case 17: 
            { return RBRACK;
            }
          case 103: break;
          case 18: 
            { return LBRACE;
            }
          case 104: break;
          case 19: 
            { return RBRACE;
            }
          case 105: break;
          case 20: 
            { return DOT;
            }
          case 106: break;
          case 21: 
            { return SCRIPT_LINE;
            }
          case 107: break;
          case 22: 
            { return TRANSFORMATION_LINE;
            }
          case 108: break;
          case 23: 
            { return STRING;
            }
          case 109: break;
          case 24: 
            { return LEFT_LEFT;
            }
          case 110: break;
          case 25: 
            { return SYSPATH;
            }
          case 111: break;
          case 26: 
            { return NOT_EQUALS;
            }
          case 112: break;
          case 27: 
            { return REGEXP_NOT_MATCHES;
            }
          case 113: break;
          case 28: 
            { return DOUBLE_AND;
            }
          case 114: break;
          case 29: 
            { return DOUBLE_OR;
            }
          case 115: break;
          case 30: 
            { return REGEXP_MATCHES;
            }
          case 116: break;
          case 31: 
            { return CONCAT;
            }
          case 117: break;
          case 32: 
            { return EVER;
            }
          case 118: break;
          case 33: 
            { return TYPE;
            }
          case 119: break;
          case 34: 
            { return EXPR;
            }
          case 120: break;
          case 35: 
            { return NEVER;
            }
          case 121: break;
          case 36: 
            { return USING;
            }
          case 122: break;
          case 37: 
            { return FIELD;
            }
          case 123: break;
          case 38: 
            { return CTYPE;
            }
          case 124: break;
          case 39: 
            { return EXISTS;
            }
          case 125: break;
          case 40: 
            { return SCRIPT;
            }
          case 126: break;
          case 41: 
            { return SYMBOL;
            }
          case 127: break;
          case 42: 
            { return FORALL;
            }
          case 128: break;
          case 43: 
            { return FORMAT;
            }
          case 129: break;
          case 44: 
            { return DISABLE;
            }
          case 130: break;
          case 45: 
            { return EXTENDS;
            }
          case 131: break;
          case 46: 
            { return VIRTUAL;
            }
          case 132: break;
          case 47: 
            { return TYPEDEF;
            }
          case 133: break;
          case 48: 
            { return FILE_IN;
            }
          case 134: break;
          case 49: 
            { return INTEGER;
            }
          case 135: break;
          case 50: 
            { return HASH_INCLUDE;
            }
          case 136: break;
          case 51: 
            { return ITERATOR;
            }
          case 137: break;
          case 52: 
            { return CONSTANT;
            }
          case 138: break;
          case 53: 
            { return DECLARER;
            }
          case 139: break;
          case 54: 
            { return POSITION;
            }
          case 140: break;
          case 55: 
            { return FINALIZE;
            }
          case 141: break;
          case 56: 
            { return ATTRIBUTE;
            }
          case 142: break;
          case 57: 
            { return STATEMENT;
            }
          case 143: break;
          case 58: 
            { return PARAMETER;
            }
          case 144: break;
          case 59: 
            { return INITIALIZE;
            }
          case 145: break;
          case 60: 
            { return IDENTIFIER;
            }
          case 146: break;
          case 61: 
            { return DEPENDS_ON;
            }
          case 147: break;
          case 62: 
            { return EXPRESSION;
            }
          case 148: break;
          case 63: 
            { return FIELD_LIST;
            }
          case 149: break;
          case 64: 
            { return INITIALIZER;
            }
          case 150: break;
          case 65: 
            { return DECLARATION;
            }
          case 151: break;
          case 66: 
            { return FORMAT_LIST;
            }
          case 152: break;
          case 67: 
            { return IDEXPRESSION;
            }
          case 153: break;
          case 68: 
            { return POSITION_ANY;
            }
          case 154: break;
          case 69: 
            { return METAVARIABLE;
            }
          case 155: break;
          case 70: 
            { return ITERATOR_NAME;
            }
          case 156: break;
          case 71: 
            { return DECLARER_NAME;
            }
          case 157: break;
          case 72: 
            { return UNARY_OPERATOR;
            }
          case 158: break;
          case 73: 
            { return ATTRIBUTE_NAME;
            }
          case 159: break;
          case 74: 
            { return STATEMENT_LIST;
            }
          case 160: break;
          case 75: 
            { return PARAMETER_LIST;
            }
          case 161: break;
          case 76: 
            { return IDENTIFIER_LIST;
            }
          case 162: break;
          case 77: 
            { return EXPRESSION_LIST;
            }
          case 163: break;
          case 78: 
            { return EXPRESSION_ENUM;
            }
          case 164: break;
          case 79: 
            { return BINARY_OPERATOR;
            }
          case 165: break;
          case 80: 
            { return INITIALIZER_LIST;
            }
          case 166: break;
          case 81: 
            { return EXPRESSION_UNION;
            }
          case 167: break;
          case 82: 
            { return FRESH_IDENTIFIER;
            }
          case 168: break;
          case 83: 
            { return EXPRESSION_STRUCT;
            }
          case 169: break;
          case 84: 
            { return LOCAL_IDEXPRESSION;
            }
          case 170: break;
          case 85: 
            { return ASSIGNMENT_OPERATOR;
            }
          case 171: break;
          case 86: 
            { return GLOBAL_IDEXPRESSION;
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

